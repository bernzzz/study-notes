Introduction to Docker
###########################

Docker is an open source project that automates the deployment of applications inside software containers,by providing an additional layer of abstraction and automation of operating 

system- levelvirtulaization on linux.


Containers Vs. Virtual Machines
##################################

VM single OS . Containers can share OS ..

http://www.slideshare.net/dotCloud/docker-intro-november


Docker Architecture
#####################
http://www.slideshare.net/dotCloud/docker-intro-november

Container Architecture 

	Docker is a client server application where both the daemon and client can be run on the same system or you can connect a Docker client with a remote daemon.

docker clieant and daemons can communicate via sockets or through a RESTful API.


main components

1.Daemon

2.Client

3.Docker.io Registry.


Instead of virtualizing hardware containers rest on a single linux instance. docker engine is an encapsulating process on the underlying system.


Docker HUB
###################

The docker Hub is a public registry/repository maintained by docker Inc contains a large number of images that you can download and use to build containers.

http://hub.docker.com


Docker Installation

#############################3

 1.yum update

 2.Add the yum repo.



[dockerrepo]

name=Docker Repository

baseurl=https://yum.dockerproject.org/repo/main/centos/7/

enabled=1

gpgcheck=1

gpgkey=https://yum.dockerproject.org/gpg



3.yum install docker-engine

4.Enable the service. systemctl enable docker.service

5.start the docker --- systemctl start docker

6.verify -- docker run --rm hello-world



Add user to the docker group for enabling access for individual users to run docker.

sudo usermod -aG docker ec2-user

docekr images -- see the available repos.

docker --version --- see the verion.


Creating Our First Image

###################################

docker version --gives the client and server version.

docker info --detailed docker information 

/var/lib/docker ---contains the docker files

docke ps -- shows the current running containers

docker ps -a -- show the containers run some time ago.

docker images -- shows the docker image info.

/var/lib/docker/containers/ --container info.

/var/lib/docker/image/devicemapper/imagedb/content/sha256 -- image info

docker pull ubuntu:"tag" --- pull the ubuntu image with the righ tag.

docker run -i -t ubuntu:xenial /bin/bash --- i for interactive -t for attachign to tty and /bin/bash --the command --runs ubuntu:xneial

docker restart "container name/ID" --restarts the container process.

docker inspect "container name/ID" --gives all the info about the container

docker attach "container name/ID" --- attach/enter  into the container.



Packaging A Customized Container

#####################################

1.packing a cutomized container using git commit 


	docker pull centos:latest --pulls the latest centos image

	docker run -it centos:latest /bin/bash --- launch the container

	echo "version 1 of custom inage " > /tmp/image_ver.txt -- create a veriosn file

	update and install telnet and open ssh server and add prabin user.

	docker commit -m "Installed ssh telnet and added user prabin" -a bernard pedantic_swirles bernard/centos:v1----use docker commit to commit the chanegs to a new image.



2.packing a cutomized container using a docker file


	mkdir build

	vim Dockerfile --

	

		FROM centos:latest

		MAINTAINER bernard <*******@gmail.com>

		RUN yum update -y

		RUN yum install openssh-server -y

		RUN useradd jhon



	docker build -t=bernard\centossshdonly:v2 . --- the dot assumes the docker files resides in the current directory.



Running Container Commands With Docker

#######################################

load of a docker container will reflect the underlying operating system.

docker logs "container name" --- shows the things that been run interms of the container.



docker exec "container name" ls ---executes the command inside the container and gives the result with out attching the container.

docker exec "container name" cat /etc/profile --executes the command inside the container and gives the result with out attching the container.



docker run bernarad/centossshd:v2 echo "helloworld" --- we can start up a container for just running a command 

docker run -d bernarad/centossshd:v2 /bin/bash -c "while true; do echo hello;sleep 1; done ;" --- run and daemonize a container to run a script or a runningprocess. the out put of the same can be verified suing docker log command

docker ps -a -q -- gives all the container ids
docker stop $(docker ps -a -q) --stop all the containers
docker rm $(docker ps -a -q) -- removes all the containers.
docker rmi $(docker images -q) -- deletes all the images .

Exposing Our Container With Port Redirects
#################################################

For a container to listen to aport that has to be exposed to the underlying host .

docker run -d nginx:latest -- runs the deaemonized nginx container
docker run -d -p 80:80 nginx:latest --- redirect the local port 80 to the conatiner port 80.


